import os
import logging
import json
from datetime import datetime
from pytz import timezone
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

import gspread
from google.oauth2 import service_account

# ---------- Load env ----------
# –ª–æ–∫–∞–ª—å–Ω–æ: .env, –Ω–∞ Railway –±–µ—Ä—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
WELCOME_IMAGE_URL = os.getenv("WELCOME_IMAGE_URL")

SPREADSHEET_ID = os.getenv("GOOGLE_SPREADSHEET_ID")
# –ù–û–í–´–ï –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: –≤–µ—Å—å JSON —Å —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")

# —á–µ–∫-–ª–∏—Å—Ç—ã (–ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–∏ —Å—Å—ã–ª–∫–∏ –≤ Variables)
CHECKLIST_PRIMARY = os.getenv("CHECKLIST_PRIMARY", "")      # –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–µ–º–µ–π–Ω—É—é –∏–ø–æ—Ç–µ–∫—É
CHECKLIST_SECONDARY = os.getenv("CHECKLIST_SECONDARY", "")  # –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å IT –∏–ø–æ—Ç–µ–∫—É
CHECKLIST_THIRD = os.getenv("CHECKLIST_THIRD", "")          # –¢–æ–ø –ª—É—á—à–∏—Ö –ñ–ö

# –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment variables")
if not SPREADSHEET_ID:
    raise RuntimeError("GOOGLE_SPREADSHEET_ID is not set in environment variables")

# ---------- Logging ----------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------- Google Sheets init ----------
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞:
# 1) —á–∏—Ç–∞—Ç—å –≤–µ—Å—å JSON –∏–∑ GOOGLE_CREDENTIALS (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è Railway)
# 2) fallback: –µ—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å—á–∏—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π service_account.json (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏)
if GOOGLE_CREDENTIALS:
    try:
        creds_info = json.loads(GOOGLE_CREDENTIALS)
        creds = service_account.Credentials.from_service_account_info(
            creds_info,
            scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
        )
    except Exception as e:
        logger.exception("Failed to create credentials from GOOGLE_CREDENTIALS env: %s", e)
        raise
else:
    # fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ–∞–π–ª service_account.json –≤ –∫–∞—Ç–∞–ª–æ–≥–µ)
    if os.path.exists("service_account.json"):
        try:
            creds = service_account.Credentials.from_service_account_file(
                "service_account.json",
                scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
            )
        except Exception as e:
            logger.exception("Failed to create credentials from service_account.json: %s", e)
            raise
    else:
        raise RuntimeError("Google credentials not found: set GOOGLE_CREDENTIALS variable or provide service_account.json")

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è gspread
try:
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(SPREADSHEET_ID)
except Exception as e:
    logger.exception("Failed to authorize gspread or open spreadsheet: %s", e)
    raise

def ensure_worksheet(name: str, headers: list):
    try:
        ws = sh.worksheet(name)
    except gspread.WorksheetNotFound:
        ws = sh.add_worksheet(title=name, rows=100, cols=20)
    row1 = ws.row_values(1)
    if not row1:
        ws.append_row(headers, value_input_option="USER_ENTERED")
    return ws

ws_leads = ensure_worksheet("leads", [
    "timestamp", "user_id", "username", "full_name",
    "district", "rooms", "deadline", "purchase", "budget"
])
ws_questions = ensure_worksheet("questions", [
    "timestamp", "user_id", "username", "full_name", "question"
])

# ---------- Timezone ----------
# –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–º–µ–Ω—è–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
TZ = timezone("Europe/Kaliningrad")

def now_str():
    return datetime.now(TZ).strftime("%Y-%m-%d %H:%M:%S %Z")

def safe_username(u: types.User):
    return f"@{u.username}" if u.username else ""

def append_lead(user: types.User, data: dict):
    try:
        ws_leads.append_row([
            now_str(),
            user.id,
            safe_username(user),
            f"{user.first_name or ''} {user.last_name or ''}".strip(),
            data.get("district", ""),
            data.get("rooms", ""),
            data.get("deadline", ""),
            data.get("purchase", ""),
            data.get("budget", ""),
        ], value_input_option="USER_ENTERED")
    except Exception as e:
        logger.exception("Failed to append lead to Google Sheets: %s", e)
        raise

def append_question(user: types.User, question: str):
    try:
        ws_questions.append_row([
            now_str(),
            user.id,
            safe_username(user),
            f"{user.first_name or ''} {user.last_name or ''}".strip(),
            question,
        ], value_input_option="USER_ENTERED")
    except Exception as e:
        logger.exception("Failed to append question to Google Sheets: %s", e)
        raise

# ---------- Telegram bot ----------
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

# States for lead form
class LeadForm(StatesGroup):
    district = State()
    rooms = State()
    deadline = State()
    purchase = State()
    budget = State()

class QuestionForm(StatesGroup):
    text = State()

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üè† –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üìã –ß–µ–∫-–ª–∏—Å—Ç—ã")
    return kb

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu()
    )
    if WELCOME_IMAGE_URL:
        try:
            await bot.send_photo(message.chat.id, WELCOME_IMAGE_URL)
        except Exception as e:
            logger.warning(f"Failed to send welcome image: {e}")

# ---------- Lead form ----------
@dp.message_handler(lambda m: m.text == "üè† –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É")
async def lead_start(message: types.Message, state: FSMContext):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π", "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π")
    kb.add("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", "–ù–µ –≤–∞–∂–Ω–æ")
    kb.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=kb)
    await LeadForm.district.set()

@dp.message_handler(lambda m: m.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥", state="*")
async def go_back(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_menu())

@dp.message_handler(state=LeadForm.district)
async def lead_district(message: types.Message, state: FSMContext):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        return await go_back(message, state)
    await state.update_data(district=message.text)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("1", "1+", "2")
    kb.add("2+", "3", "3+")
    kb.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    await message.answer("–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –Ω—É–∂–Ω–æ?", reply_markup=kb)
    await LeadForm.rooms.set()

@dp.message_handler(state=LeadForm.rooms)
async def lead_rooms(message: types.Message, state: FSMContext):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        return await go_back(message, state)
    await state.update_data(rooms=message.text)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–°–¥–∞–Ω", "–í —ç—Ç–æ–º –≥–æ–¥—É")
    kb.add("1-2 –≥–æ–¥–∞", "3-4 –≥–æ–¥–∞")
    kb.add("–ù–µ–≤–∞–∂–Ω–æ", "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    await message.answer("–ö–∞–∫–æ–π —Å—Ä–æ–∫ —Å–¥–∞—á–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=kb)
    await LeadForm.deadline.set()

@dp.message_handler(state=LeadForm.deadline)
async def lead_deadline(message: types.Message, state: FSMContext):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        return await go_back(message, state)
    await state.update_data(deadline=message.text)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ò–ø–æ—Ç–µ–∫–∞", "–õ—å–≥–æ—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    kb.add("–†–∞—Å—Å—Ä–æ—á–∫–∞", "–ù–∞–ª–∏—á–Ω—ã–µ")
    kb.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    await message.answer("–ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –ø–æ–∫—É–ø–∫–∏?", reply_markup=kb)
    await LeadForm.purchase.set()

@dp.message_handler(state=LeadForm.purchase)
async def lead_purchase(message: types.Message, state: FSMContext):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        return await go_back(message, state)
    await state.update_data(purchase=message.text)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–î–æ 5 –º–ª–Ω", "5 - 7 –º–ª–Ω")
    kb.add("7 - 9 –º–ª–Ω", "9 - 12 –º–ª–Ω")
    kb.add("–ë–æ–ª–µ–µ 12 –º–ª–Ω", "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    await message.answer("–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?", reply_markup=kb)
    await LeadForm.budget.set()

@dp.message_handler(state=LeadForm.budget)
async def lead_finish(message: types.Message, state: FSMContext):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        return await go_back(message, state)
    await state.update_data(budget=message.text)
    data = await state.get_data()
    await state.finish()

    # Confirm to user
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ!", reply_markup=main_menu())

    # Send to admin
    summary = (
        "<b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–±–æ—Ä–∫—É</b>\n"
        f"–†–∞–π–æ–Ω: {data.get('district')}\n"
        f"–ö–æ–º–Ω–∞—Ç—ã: {data.get('rooms')}\n"
        f"–°—Ä–æ–∫ —Å–¥–∞—á–∏: {data.get('deadline')}\n"
        f"–°–ø–æ—Å–æ–± –ø–æ–∫—É–ø–∫–∏: {data.get('purchase')}\n"
        f"–ë—é–¥–∂–µ—Ç: {data.get('budget')}\n"
        f"–û—Ç: {safe_username(message.from_user)} (ID: {message.from_user.id})"
    )
    try:
        if ADMIN_ID:
            await bot.send_message(ADMIN_ID, summary)
    except Exception as e:
        logger.error(f"Failed to send admin message: {e}")

    # Save to Google Sheets
    try:
        append_lead(message.from_user, data)
    except Exception as e:
        logger.error(f"Failed to append to Google Sheets (leads): {e}")
        try:
            if ADMIN_ID:
                await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets (leads): {e}")
        except:
            pass

# ---------- Ask a Question ----------
@dp.message_handler(lambda m: m.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: types.Message, state: FSMContext):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.", reply_markup=kb)
    await QuestionForm.text.set()

@dp.message_handler(state=QuestionForm.text, content_types=types.ContentTypes.TEXT)
async def receive_question(message: types.Message, state: FSMContext):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await state.finish()
        return await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_menu())

    question = message.text.strip()
    await state.finish()

    # Notify user
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω. –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_menu())

    # Send to admin
    summary = (
        "<b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</b>\n"
        f"{question}\n\n"
        f"–û—Ç: {safe_username(message.from_user)} (ID: {message.from_user.id})"
    )
    try:
        if ADMIN_ID:
            await bot.send_message(ADMIN_ID, summary)
    except Exception as e:
        logger.error(f"Failed to send admin question: {e}")

    # Save to Google Sheets
    try:
        append_question(message.from_user, question)
    except Exception as e:
        logger.error(f"Failed to append to Google Sheets (questions): {e}")
        try:
            if ADMIN_ID:
                await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets (questions): {e}")
        except:
            pass

# ---------- Checklists ----------
@dp.message_handler(lambda m: m.text == "üìã –ß–µ–∫-–ª–∏—Å—Ç—ã")
async def checklists(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # –ö–Ω–æ–ø–∫–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–≤–æ–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
    kb.add("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–µ–º–µ–π–Ω—É—é –∏–ø–æ—Ç–µ–∫—É")
    kb.add("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å IT –∏–ø–æ—Ç–µ–∫—É")
    kb.add("–¢–æ–ø –ª—É—á—à–∏—Ö –ñ–ö")
    kb.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–∫-–ª–∏—Å—Ç:", reply_markup=kb)

@dp.message_handler(lambda m: m.text in ["–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–µ–º–µ–π–Ω—É—é –∏–ø–æ—Ç–µ–∫—É", "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å IT –∏–ø–æ—Ç–µ–∫—É", "–¢–æ–ø –ª—É—á—à–∏—Ö –ñ–ö"])
async def checklist_links(message: types.Message):
    mapping = {
        "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–µ–º–µ–π–Ω—É—é –∏–ø–æ—Ç–µ–∫—É": CHECKLIST_PRIMARY,
        "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å IT –∏–ø–æ—Ç–µ–∫—É": CHECKLIST_SECONDARY,
        "–¢–æ–ø –ª—É—á—à–∏—Ö –ñ–ö": CHECKLIST_THIRD,
    }
    link = mapping.get(message.text)
    if link:
        await message.answer(f"–í–æ—Ç –≤–∞—à —á–µ–∫-–ª–∏—Å—Ç: {link}", disable_web_page_preview=False)
    else:
        await message.answer("–ß–µ–∫-–ª–∏—Å—Ç –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=main_menu())

# Fallback: unknown text -> show menu
@dp.message_handler(content_types=types.ContentTypes.ANY)
async def fallback(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá", reply_markup=main_menu())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
